In principle the input text for the report from Text formatted DocBlocks or from external Text files can be written without any concern for the syntax which will be outlined here however it may be useful to be aware of the features which can be used as it may be useful in preparing the report or it may explain why the output is not quite as expected.

Whitespace such as tabs and consecutive spaces appear in the output report as just one space. 
Note this seems to be a limitation of report generator and may be fixed in the future.

Newlines also function differently than one might expect, a single newline is ignored; multiple newline characters must appear consecutively to actually go to a newline in the report. 
The rationale for this is that if a single newline corresponded to a newline in the report then the text file in which the input is written will likely be unreadable as it would have too much on a single line (i.e. it would have a whole paragraph on a single line).

Lines in the text file may also be commented out if desired; beginning a line with the percent character (%) will lead to that line being ignored during report generation. 
Unlike MATLAB, the % cannot be added at any point in the line, just the very beginning.

Images may also be included in the report with [image=imagePath]imageTitle[/image] where "imagePath" is the path on the system to the file which will be included, and "imageTitle" is the title which will be given to the image in the report.

The primary capability of the syntax is that it allows linking to external sources, linking to other parts of the report, and also anchors for those to be linked to. 
To create a link to a source external to the document use [url=myLinkID]linkText[/url]. 
In this 'code' only "linkText" will appear in the document and it can be clicked to open "myLinkID" (e.g. www.website.com, or C:\Users\File_Name). 
To create a link anchor which can be linked to from other points in the document use [anchor=myLinkID]linkText[/anchor]. 
As with the url tags, only "linkText" will appear in the document.
The link ID of the anchor will be "myLinkID" and will now identify the point in the document for a goto tag (described below) to lead to; there should be only one anchor with a given Link ID to avoid ambiguities. 
To create a link to a link anchor in the document, use [goto=myLinkID]linkText[/goto]. 
Again, only "linkText" will appear in the document and clicking "linkText" will lead to the anchor with link ID of "myLinkID". 
Note the use of the goto and anchor tags allows for linking across all parts of the report including between DocBlocks and is not limited to the text file in which a link is created.
As report generator automatically creates a number of link anchors, it is also worth noting that this syntax allows linking to some of those. 
To link to an item in a table in the appendix, write "app:ItemName" in place of "myLinkID" in the examples above. 
In this case "ItemName" should be replaced with the contents of the leftmost column of the row that this should link to. 
E.g. If there is a table in the appendix in which the leftmost column is Name, the top-left cell in the table will also be Name (as it is the header), so [goto=app:Name]LinkText[/goto] will link to the first row in that table. 
Note multiple rows may have the same entry in the first column, in which case this method of linking will choose one of the options arbitrarily. 
This ambiguity can be handled by using a longform syntax in which "app:ItemName" should be replaced with "%<linkMap('Table_TableTitle_ItemName')>".
In this case "TableTitle" is the title of the table, and "ItemName" is the same as with the regular "app:ItemName" syntax.

In addition to this, MATLAB code may be used in the variable fields of each tag (i.e. image, url, goto, and anchor tags) as well. 
If the appropriate code was "my code" then it could be run as MATLAB code by entering it as follows: %<my code>
