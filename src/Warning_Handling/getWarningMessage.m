function message = getWarningMessage(warningID, varargin)
% GETWARNINGMESSAGE returns a warning message to display based on a warning
%   identifier.
%
%   Inputs:
%       warningID   Identifier of the warning to display based on what
%                   occured during report generation.
%       varargin    The use of this varies with the warningID (see the 
%                   comments in the code for specifics).
%
%   Outputs:
%       message     Returns a cell array of messages to display.
%                   message{1} will be displayed in the Summary of Warnings
%                   section.
%                   message{2} will be displayed where the warning occurred
%                   in the report.
%

switch warningID
    
    %getWarningMessage('userDataWasModified', chapter, RptgenSL.getReportedSystem)
    case 'msgUnmodifiedUserData'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The text in the "', varargin{1}, '" DocBlock of the ', varargin{2}, ' subsystem was left as the default.\n', ...
            '\nWhy it''s a problem: Each of the required DocBlocks should at least say something to ensure that it''s not simply forgotten ("N/A" may be reasonable and will indicate that the section is intentionally empty).\n', ...
            '\nFix: Open and appropriately edit the contents of the "', varargin{1}, '" DocBlock of the ', varargin{2}, ' subsystem.\n'];
        message{1} = sprintf(stringVar);
        message{2} = message{1};
        %This warning message should be displayed for every required DocBlock that was not edited after being added to the model
        %varargin{1} is the name of the DocBlock --> probably the following: chapter
        %varargin{2} is the subsystem containing the DocBlock --> probably the following: RptgenSL.getReportedSystem

        %This will be removed in the future...
% % %     %getWarningMessage('msgErrorIn_SDD_RPT_Setup', model)
% % %     case 'msgErrorIn_SDD_RPT_Setup'
% % %         stringVar = [ ...
% % %             'Warning ID: ', warningID, '\n', ...
% % %             'Problem: Either the ''SDD_RPT_Setup.m'' or the ''', varargin{1}, 'SDD_Config.m'' file failed to run.\n', ...
% % %             'Fix: Ensure both of these are on the path and debug them if they are already on the path.\n', ...
% % %             '\tPlace a breakpoint in the files and step through by running the functions from the command line.\n', ...
% % %             '\t(You can find the files using the ''which'' function.)\n'];
% % %         message = {sprintf(stringVar)};
% % %         %This warning message should be displayed when the SDD_RPT_Setup function has an error
    
    %getWarningMessage('msgErrorIn_model_SDD_Config', model)
    case 'msgErrorIn_model_SDD_Config'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The ''', varargin{1}, '_SDD_Config.m'' was either not found or had an error when it ran.\n', ...
            '\nFix: Ensure the file is on the path and debug if already on the path.\n', ...
            '\tPlace a breakpoint in the files and step through by running the functions from the command line.\n', ...
            '\t(You can find the file using the ''which'' function.)\n', ...
            '\nFind the default: A default config file is provided with this program and can be found at "Report_Specific_Files\TopsysName_SDD_Config.m" within the program''s directory.', ...
            '\nNote: Although missing this file won''t necessarily cause any problems, this file ', ...
            'should most likely be created/used and it can be left empty to get rid of this warning.\n'];
        message = {sprintf(stringVar)};
        %This warning message should be displayed when the the config file (<model>_SDD_Config.m) experiences an error or is not on the MATLAB path

    %getWarningMessage('msgBadSubListDimension')
    case 'msgBadSubListDimension'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The subsystemList variable should be a 1 dimensional array and it is not.\n', ...
            '\nFix: Re-define the subsystemList variable so that it is a 1 dimensional array.\n', ...
            '\nWhere to edit the subsystemList variable: In the ''<model>SDD_Config.m'' file.\n', ...
            '\nCheck that the fix worked: If you try running the code to set subsystemList from the MATLAB command line, ', ...
            'you can then test that it is properly set by running:\n', ...
            '\t"size(subsystemList,1) ~= 1 && size(subsystemList,2) ~= 1"\n', ...
            'The result should give ans == 0.\n'];
        message = {sprintf(stringVar)};
        %This warning message should be displayed when the dimensions of subsystemList are not suitable for the System Loop component
        
    %getWarningMessage('msgMapDataTypesFailure', model)
    case 'msgMapDataTypesFailure'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The "mapDataTypes" function produced an error when run on ', varargin{1}, '.\n', ...
            '\nCause: mapDataTypes may have a bug that is being caused by an unexpected model setup.\n', ...
            '\nFix: Modify the model to prevent mapDataTypes from failing ', ...
            'or more likely you will want to ignore this warning. \n\tSet the requireInterface variable to false.\n', ...
            '\nWhere to find the requireInterface variable: In the SDD_RPT_Setup.m file under the reportSettings function.\n', ...
            '\nSide effect: The interface section may not appear in the report.\n'];
        message = {sprintf(stringVar)};
        %This warning message should be displayed when mapDataTypes has an error on execution
        %varargin{1} is the model --> probably the following: model
        
    %getWarningMessage('msgMapDataTypesNotFound')
    case 'msgMapDataTypesNotFound'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The "mapDataTypes.m" file was not found on the MATLAB path.\n', ...
            '\nWhy is this function needed: It is used to populate tables for each subsystem''s interface ', ...
            'with block data types and without this function the tables may not be generated at all.\n', ...
            '\nFix: Add "mapDataTypes.m" to the MATLAB path.\n', ...
            '\nWhere to find the file: The "mapDataTypes.m" file should be in the same folder as the report template.\n'
            '\nBack-up fix: Ignore this warning by setting the requireInterface variable to false.\n', ...
            '\nWhere to find the requireInterface variable: In the SDD_RPT_Setup.m file under the reportSettings function.\n', ...
            '\nSide effect: The interface section may not appear in the report.\n'];
        message = {sprintf(stringVar)};
        %This warning message should be displayed when mapDataTypes.m is not on the MATLAB path
        
    %getWarningMessage('msgTableSetupNotFound')
    case 'msgTableSetupNotFound'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The "TableSetup.m" file was not found on the MATLAB path. \n', ...
            '\nWhy is this function needed: It is used to generate tables with information about each subsystem''s interface ', ...
            'and without it, the tables will not generate at all.\n', ...
            '\nFix: Add "TableSetup.m" to the MATLAB path.\n', ...
            '\nWhere to find the file: The "TableSetup.m" file should be in the same folder as the report template.\n', ...
            '\nBack-up Fix: Ignore this warning by setting the requireInterface variable to false.\n', ...
            '\nWhere to find the requireInterface variable: In the SDD_RPT_Setup.m file under the reportSettings function.\n', ...
            '\nSide effect: The interface section may not appear in the report.\n'];
        message = {sprintf(stringVar)};
        %This warning message should be displayed when TableSetup.m is not on the MATLAB path
        
    %getWarningMessage('msgSubsystemNotExist', badSubList{i}, model)
    case 'msgSubsystemNotExist'
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The "', varargin{1}, '" subsystem does not exist in the ', varargin{2}, ' model even though it was set as a subsystem to include in this report.\n', ...
            '\nCause: Most likely a typo was made when the list of subsystems was being set or the wrong model is open.\n', ...
            '\tIt is also possible that the model is missing a subsystem or that a subsystem was named wrong in the model or that the subsystem should not have been added to the subsystemList variable in the first place.\n', ...
            '\nFix: Edit the subsystemList variable or the model as appropriate.\n', ...
            '\nWhere to set the subsystemList variable: Set it in ', varargin{2}, '_SDD_Config.m - this file may need to be created.\n'];
        message = {sprintf(stringVar)};
        %This warning message should be displayed for every subsystem found that does not exist in the model
        %varargin{1} is a subsystem --> probably the following: badSubList{i}
        %varargin{2} is the model --> probably the following: model

    %getWarningMessage('msgMissingChapter', chapter, RptgenSL.getReportedSystem)
    case 'msgMissingChapter'
        message = {};
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: The "', varargin{1}, '" DocBlock for ', varargin{2}, ' is missing.\n', ...
            '\nWhy it''s needed: This DocBlock is used to fill out the corresponding section in the report.\n', ...
            '\nFix: Add the "', varargin{1}, '" DocBlock from the SDD Blocks library to ', varargin{2}, ', and fill out the contents as appropriate.\n', ...
            '\tThe DocBlock can also be added to the current system with: "gen_', strrep(varargin{1},' ', '_'), '(gcs)" if you prefer to use the command line.\n', ...
            '\tThe DocBlock can also be added just like any other DocBlock, however the name must be "', varargin{1}, '".\n'];
        message{1} = sprintf(stringVar);
        
        message{2} = message{1};
        %This warning message should be displayed for every required DocBlock that is not present in the model
        %varargin{1} is the name of a required DocBlock --> probably the following: chapter
        %varargin{2} is the subsystem in which the DocBlock is missing --> probably the following: RptgenSL.getReportedSystem

%%%%%%this warning shouldn't matter anymore?
    %getWarningMessage('msgDuplicates', RptgenSL.getReportedSystem)
    case 'msgDuplicates'
        message = {};
        stringVar = [ ...
            'The ', varargin{1}, ...
            ' SubSystem had a non-unique name parameter among the SubSystems in this report.', ...
            ' To get rid of this warning, either the model can be changed such that these functions have', ...
            ' unique names, or the "allowDuplicateSections" variable', ...
            ' (which can be found in the first Eval component of the report template file)', ...
            ' can be set to "true".\n'];
        message{1} = sprintf(stringVar);
        
        stringVar = [ ...
            'The name parameter for the ', varargin{1}, ' SubSystem was not unique among SubSystems included in this report.\n', ...
            'To get rid of this warning, either the model can be changed such that these functions have unique names (which they probably should), ', ...
            'or the "allowDuplicateSections" variable (which can be found in the first Eval component of the report template file) can be set to "true".\n\n', ...
            'The protocol this report template uses to handle non-unique SubSystem names is to simply append the name of their respective parent SubSystems ', ...
            'to their section names.\n', ...
            'Note that it does not guarantee that these names are now unique.'];
        message{2} = sprintf(stringVar);
        
    %getWarningMessage('msgParseError', stringToParse)
    case 'msgParseError'
        message = {};
        stringVar = [ ...
            'Warning ID: ', warningID, '\n', ...
            'Problem: A text component which was being printed in the document did not follow the syntax this tool uses for text.\n', ...
            '\nFix: Find the offending text (e.g. in a text format DocBlock or in an external text file) and edit it as appropriate.\n', ...
            '\nFor details about the syntax, see TextDocBlockSyntax.txt.\n', ...
            '\n\nOffending Text: \n'];
        message{1} = [sprintf(stringVar), varargin{1}];
        
        message{2} = message{1};
        %This warning message should be displayed if parsedString encountered an error when it was passed varargin{1}
        %varargin{1} is a string --> probably the following: stringToParse
end
end